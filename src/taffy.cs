// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.8.0+v0.25.0
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace uniffi.taffy;

using FfiConverterTypeNodeId = FfiConverterUInt64;
using NodeId = UInt64;

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer
{
    public int capacity;
    public int len;
    public IntPtr data;

    public static RustBuffer Alloc(int size)
    {
        return _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                var buffer = _UniFFILib.ffi_taffy_rustbuffer_alloc(size, ref status);
                if (buffer.data == IntPtr.Zero)
                {
                    throw new AllocationException(
                        $"RustBuffer.Alloc() returned null data pointer (size={size})"
                    );
                }
                return buffer;
            }
        );
    }

    public static void Free(RustBuffer buffer)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.ffi_taffy_rustbuffer_free(buffer, ref status);
            }
        );
    }

    public static BigEndianStream MemoryStream(IntPtr data, int length)
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream()
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), len));
        }
    }

    public BigEndianStream AsWriteableStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream(
                    (byte*)data.ToPointer(),
                    capacity,
                    capacity,
                    FileAccess.Write
                )
            );
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes
{
    public int length;
    public IntPtr data;
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType>
{
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value)
    {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try
        {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToInt32(stream.Position);
            return rbuf;
        }
        catch
        {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf)
    {
        var stream = rbuf.AsStream();
        try
        {
            var item = Read(stream);
            if (stream.HasRemaining())
            {
                throw new InternalException(
                    "junk remaining in buffer after lifting, something is very wrong!!"
                );
            }
            return item;
        }
        finally
        {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType> : FfiConverter<CsType, RustBuffer>
{
    public override CsType Lift(RustBuffer value)
    {
        return LiftFromRustBuffer(value);
    }

    public override RustBuffer Lower(CsType value)
    {
        return LowerIntoRustBuffer(value);
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct RustCallStatus
{
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess()
    {
        return code == 0;
    }

    public bool IsError()
    {
        return code == 1;
    }

    public bool IsPanic()
    {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
internal class UniffiException : Exception
{
    public UniffiException()
        : base() { }

    public UniffiException(string message)
        : base(message) { }
}

internal class UndeclaredErrorException : UniffiException
{
    public UndeclaredErrorException(string message)
        : base(message) { }
}

internal class PanicException : UniffiException
{
    public PanicException(string message)
        : base(message) { }
}

internal class AllocationException : UniffiException
{
    public AllocationException(string message)
        : base(message) { }
}

internal class InternalException : UniffiException
{
    public InternalException(string message)
        : base(message) { }
}

internal class InvalidEnumException : InternalException
{
    public InvalidEnumException(string message)
        : base(message) { }
}

internal class UniffiContractVersionException : UniffiException
{
    public UniffiContractVersionException(string message)
        : base(message) { }
}

internal class UniffiContractChecksumException : UniffiException
{
    public UniffiContractChecksumException(string message)
        : base(message) { }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E>
    where E : Exception
{
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler : CallStatusErrorHandler<UniffiException>
{
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf)
    {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException(
            "library has returned an error not declared in UNIFFI interface file"
        );
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers
{
    public delegate void RustCallAction(ref RustCallStatus status);
    public delegate U RustCallFunc<out U>(ref RustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallFunc<U> callback
    )
        where E : UniffiException
    {
        var status = new RustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess())
        {
            return return_value;
        }
        else if (status.IsError())
        {
            throw errorHandler.Lift(status.error_buf);
        }
        else if (status.IsPanic())
        {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0)
            {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            }
            else
            {
                throw new PanicException("Rust panic");
            }
        }
        else
        {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallAction callback
    )
        where E : UniffiException
    {
        _UniffiHelpers.RustCallWithError(
            errorHandler,
            (ref RustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback)
    {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }
}

// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException : Exception
{
    public StreamUnderflowException() { }
}

class BigEndianStream
{
    Stream stream;

    public BigEndianStream(Stream stream)
    {
        this.stream = stream;
    }

    public bool HasRemaining()
    {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position
    {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value)
    {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value)
    {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value)
    {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value)
    {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value)
    {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value)
    {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value)
    {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value)
    {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value)
    {
        unsafe
        {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value)
    {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value)
    {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length)
    {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte()
    {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort()
    {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt()
    {
        CheckRemaining(4);
        return (uint)(
            stream.ReadByte() << 24
            | stream.ReadByte() << 16
            | stream.ReadByte() << 8
            | stream.ReadByte()
        );
    }

    public ulong ReadULong()
    {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte()
    {
        return (sbyte)ReadByte();
    }

    public short ReadShort()
    {
        return (short)ReadUShort();
    }

    public int ReadInt()
    {
        return (int)ReadUInt();
    }

    public float ReadFloat()
    {
        unsafe
        {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong()
    {
        return (long)ReadULong();
    }

    public double ReadDouble()
    {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length)
    {
        if (stream.Length - stream.Position < length)
        {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.


// This is an implementation detail which will be called internally by the public API.
static class _UniFFILib
{
    static _UniFFILib()
    {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();

        FfiConverterTypeMeasureFunction.INSTANCE.Register();
    }

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_free_style(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern StyleSafeHandle uniffi_taffy_fn_constructor_style_new(
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_align_content(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_align_items(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_align_self(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_aspect_ratio(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_border(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_display(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_flex_basis(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_flex_direction(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern float uniffi_taffy_fn_method_style_get_flex_grow(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern float uniffi_taffy_fn_method_style_get_flex_shrink(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_flex_wrap(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_gap(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_grid_auto_columns(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_grid_auto_flow(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_grid_auto_rows(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_grid_column(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_grid_row(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_grid_template_columns(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_grid_template_rows(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_inset(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_justify_content(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_justify_items(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_justify_self(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_margin(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_max_size(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_min_size(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_overflow(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_padding(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_position(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern float uniffi_taffy_fn_method_style_get_scrollbar_width(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_style_get_size(
        StyleSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_align_content(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_align_items(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_align_self(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_aspect_ratio(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_border(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_display(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_flex_basis(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_flex_direction(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_flex_grow(
        StyleSafeHandle @ptr,
        float @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_flex_shrink(
        StyleSafeHandle @ptr,
        float @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_flex_wrap(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_gap(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_grid_auto_columns(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_grid_auto_flow(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_grid_auto_rows(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_grid_column(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_grid_row(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_grid_template_columns(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_grid_template_rows(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_inset(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_justify_content(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_justify_items(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_justify_self(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_margin(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_max_size(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_min_size(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_overflow(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_padding(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_position(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_scrollbar_width(
        StyleSafeHandle @ptr,
        float @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_style_set_size(
        StyleSafeHandle @ptr,
        RustBuffer @value,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_free_taffytree(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern TaffyTreeSafeHandle uniffi_taffy_fn_constructor_taffytree_new(
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern TaffyTreeSafeHandle uniffi_taffy_fn_constructor_taffytree_with_capacity(
        ulong @capacity,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_clear(
        TaffyTreeSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_compute_layout(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        RustBuffer @availableSpace,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_compute_layout_with_measure(
        TaffyTreeSafeHandle @ptr,
        ulong @nodeId,
        RustBuffer @availableSpace,
        ulong @measureFunction,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_disable_rounding(
        TaffyTreeSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_enable_rounding(
        TaffyTreeSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_get_child_at_index(
        TaffyTreeSafeHandle @ptr,
        ulong @parent,
        ulong @childIndex,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_taffytree_get_children(
        TaffyTreeSafeHandle @ptr,
        ulong @parent,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_taffytree_get_layout(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_get_node_context(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer uniffi_taffy_fn_method_taffytree_get_parent(
        TaffyTreeSafeHandle @ptr,
        ulong @childId,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern StyleSafeHandle uniffi_taffy_fn_method_taffytree_get_style(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_get_total_node_count(
        TaffyTreeSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_insert_child_at_index(
        TaffyTreeSafeHandle @ptr,
        ulong @parent,
        ulong @childIndex,
        ulong @child,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern sbyte uniffi_taffy_fn_method_taffytree_is_dirty(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_mark_dirty(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_new_leaf(
        TaffyTreeSafeHandle @ptr,
        StyleSafeHandle @layout,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_new_leaf_with_context(
        TaffyTreeSafeHandle @ptr,
        StyleSafeHandle @layout,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_new_with_children(
        TaffyTreeSafeHandle @ptr,
        StyleSafeHandle @layout,
        RustBuffer @children,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_print_tree(
        TaffyTreeSafeHandle @ptr,
        ulong @root,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_remove(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_remove_child(
        TaffyTreeSafeHandle @ptr,
        ulong @parent,
        ulong @child,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_remove_child_at_index(
        TaffyTreeSafeHandle @ptr,
        ulong @parent,
        ulong @childIndex,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ulong uniffi_taffy_fn_method_taffytree_replace_child_at_index(
        TaffyTreeSafeHandle @ptr,
        ulong @parent,
        ulong @childIndex,
        ulong @newChild,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_set_children(
        TaffyTreeSafeHandle @ptr,
        ulong @parent,
        RustBuffer @children,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_set_node_context(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_method_taffytree_set_style(
        TaffyTreeSafeHandle @ptr,
        ulong @node,
        StyleSafeHandle @style,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void uniffi_taffy_fn_init_callback_measurefunction(
        ForeignCallback @callbackStub,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer ffi_taffy_rustbuffer_alloc(
        int @size,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer ffi_taffy_rustbuffer_from_bytes(
        ForeignBytes @bytes,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rustbuffer_free(
        RustBuffer @buf,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern RustBuffer ffi_taffy_rustbuffer_reserve(
        RustBuffer @buf,
        int @additional,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_continuation_callback_set(IntPtr @callback);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_u8(IntPtr @handle, IntPtr @uniffiCallback);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_u8(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_u8(IntPtr @handle);

    [DllImport("taffy")]
    public static extern byte ffi_taffy_rust_future_complete_u8(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_i8(IntPtr @handle, IntPtr @uniffiCallback);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_i8(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_i8(IntPtr @handle);

    [DllImport("taffy")]
    public static extern sbyte ffi_taffy_rust_future_complete_i8(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_u16(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_u16(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_u16(IntPtr @handle);

    [DllImport("taffy")]
    public static extern ushort ffi_taffy_rust_future_complete_u16(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_i16(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_i16(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_i16(IntPtr @handle);

    [DllImport("taffy")]
    public static extern short ffi_taffy_rust_future_complete_i16(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_u32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_u32(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_u32(IntPtr @handle);

    [DllImport("taffy")]
    public static extern uint ffi_taffy_rust_future_complete_u32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_i32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_i32(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_i32(IntPtr @handle);

    [DllImport("taffy")]
    public static extern int ffi_taffy_rust_future_complete_i32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_u64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_u64(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_u64(IntPtr @handle);

    [DllImport("taffy")]
    public static extern ulong ffi_taffy_rust_future_complete_u64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_i64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_i64(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_i64(IntPtr @handle);

    [DllImport("taffy")]
    public static extern long ffi_taffy_rust_future_complete_i64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_f32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_f32(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_f32(IntPtr @handle);

    [DllImport("taffy")]
    public static extern float ffi_taffy_rust_future_complete_f32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_f64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_f64(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_f64(IntPtr @handle);

    [DllImport("taffy")]
    public static extern double ffi_taffy_rust_future_complete_f64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_pointer(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_pointer(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_pointer(IntPtr @handle);

    [DllImport("taffy")]
    public static extern SafeHandle ffi_taffy_rust_future_complete_pointer(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_rust_buffer(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_rust_buffer(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_rust_buffer(IntPtr @handle);

    [DllImport("taffy")]
    public static extern RustBuffer ffi_taffy_rust_future_complete_rust_buffer(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_poll_void(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_cancel_void(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_free_void(IntPtr @handle);

    [DllImport("taffy")]
    public static extern void ffi_taffy_rust_future_complete_void(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_align_content();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_align_items();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_align_self();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_aspect_ratio();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_border();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_display();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_flex_basis();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_flex_direction();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_flex_grow();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_flex_shrink();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_flex_wrap();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_gap();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_grid_auto_columns();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_grid_auto_flow();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_grid_auto_rows();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_grid_column();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_grid_row();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_grid_template_columns();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_grid_template_rows();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_inset();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_justify_content();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_justify_items();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_justify_self();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_margin();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_max_size();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_min_size();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_overflow();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_padding();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_position();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_scrollbar_width();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_get_size();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_align_content();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_align_items();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_align_self();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_aspect_ratio();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_border();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_display();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_flex_basis();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_flex_direction();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_flex_grow();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_flex_shrink();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_flex_wrap();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_gap();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_grid_auto_columns();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_grid_auto_flow();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_grid_auto_rows();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_grid_column();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_grid_row();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_grid_template_columns();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_grid_template_rows();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_inset();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_justify_content();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_justify_items();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_justify_self();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_margin();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_max_size();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_min_size();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_overflow();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_padding();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_position();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_scrollbar_width();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_style_set_size();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_clear();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_compute_layout();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_compute_layout_with_measure();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_disable_rounding();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_enable_rounding();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_get_child_at_index();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_get_children();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_get_layout();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_get_node_context();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_get_parent();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_get_style();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_get_total_node_count();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_insert_child_at_index();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_is_dirty();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_mark_dirty();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_new_leaf();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_new_leaf_with_context();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_new_with_children();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_print_tree();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_remove();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_remove_child();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_remove_child_at_index();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_replace_child_at_index();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_set_children();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_set_node_context();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_taffytree_set_style();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_constructor_style_new();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_constructor_taffytree_new();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_constructor_taffytree_with_capacity();

    [DllImport("taffy")]
    public static extern ushort uniffi_taffy_checksum_method_measurefunction_measure();

    [DllImport("taffy")]
    public static extern uint ffi_taffy_uniffi_contract_version();

    static void uniffiCheckContractApiVersion()
    {
        var scaffolding_contract_version = _UniFFILib.ffi_taffy_uniffi_contract_version();
        if (24 != scaffolding_contract_version)
        {
            throw new UniffiContractVersionException(
                $"uniffi.taffy: uniffi bindings expected version `24`, library returned `{scaffolding_contract_version}`"
            );
        }
    }

    static void uniffiCheckApiChecksums()
    {
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_align_content();
            if (checksum != 15909)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_align_content` checksum `15909`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_align_items();
            if (checksum != 46287)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_align_items` checksum `46287`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_align_self();
            if (checksum != 38723)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_align_self` checksum `38723`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_aspect_ratio();
            if (checksum != 9437)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_aspect_ratio` checksum `9437`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_border();
            if (checksum != 31076)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_border` checksum `31076`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_display();
            if (checksum != 49775)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_display` checksum `49775`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_flex_basis();
            if (checksum != 53320)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_flex_basis` checksum `53320`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_flex_direction();
            if (checksum != 35167)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_flex_direction` checksum `35167`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_flex_grow();
            if (checksum != 60228)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_flex_grow` checksum `60228`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_flex_shrink();
            if (checksum != 3777)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_flex_shrink` checksum `3777`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_flex_wrap();
            if (checksum != 49375)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_flex_wrap` checksum `49375`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_gap();
            if (checksum != 33490)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_gap` checksum `33490`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_grid_auto_columns();
            if (checksum != 10755)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_grid_auto_columns` checksum `10755`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_grid_auto_flow();
            if (checksum != 62445)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_grid_auto_flow` checksum `62445`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_grid_auto_rows();
            if (checksum != 22888)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_grid_auto_rows` checksum `22888`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_grid_column();
            if (checksum != 18066)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_grid_column` checksum `18066`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_grid_row();
            if (checksum != 61351)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_grid_row` checksum `61351`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_taffy_checksum_method_style_get_grid_template_columns();
            if (checksum != 64983)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_grid_template_columns` checksum `64983`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_grid_template_rows();
            if (checksum != 31072)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_grid_template_rows` checksum `31072`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_inset();
            if (checksum != 28209)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_inset` checksum `28209`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_justify_content();
            if (checksum != 63771)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_justify_content` checksum `63771`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_justify_items();
            if (checksum != 27946)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_justify_items` checksum `27946`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_justify_self();
            if (checksum != 12412)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_justify_self` checksum `12412`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_margin();
            if (checksum != 47177)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_margin` checksum `47177`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_max_size();
            if (checksum != 1738)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_max_size` checksum `1738`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_min_size();
            if (checksum != 33541)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_min_size` checksum `33541`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_overflow();
            if (checksum != 31000)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_overflow` checksum `31000`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_padding();
            if (checksum != 14952)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_padding` checksum `14952`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_position();
            if (checksum != 34473)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_position` checksum `34473`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_scrollbar_width();
            if (checksum != 38821)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_scrollbar_width` checksum `38821`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_get_size();
            if (checksum != 17617)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_get_size` checksum `17617`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_align_content();
            if (checksum != 37874)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_align_content` checksum `37874`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_align_items();
            if (checksum != 45059)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_align_items` checksum `45059`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_align_self();
            if (checksum != 43223)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_align_self` checksum `43223`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_aspect_ratio();
            if (checksum != 50351)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_aspect_ratio` checksum `50351`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_border();
            if (checksum != 21598)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_border` checksum `21598`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_display();
            if (checksum != 41489)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_display` checksum `41489`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_flex_basis();
            if (checksum != 49024)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_flex_basis` checksum `49024`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_flex_direction();
            if (checksum != 15994)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_flex_direction` checksum `15994`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_flex_grow();
            if (checksum != 46003)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_flex_grow` checksum `46003`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_flex_shrink();
            if (checksum != 22321)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_flex_shrink` checksum `22321`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_flex_wrap();
            if (checksum != 47786)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_flex_wrap` checksum `47786`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_gap();
            if (checksum != 55158)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_gap` checksum `55158`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_grid_auto_columns();
            if (checksum != 50442)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_grid_auto_columns` checksum `50442`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_grid_auto_flow();
            if (checksum != 62871)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_grid_auto_flow` checksum `62871`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_grid_auto_rows();
            if (checksum != 42140)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_grid_auto_rows` checksum `42140`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_grid_column();
            if (checksum != 37743)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_grid_column` checksum `37743`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_grid_row();
            if (checksum != 38619)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_grid_row` checksum `38619`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_taffy_checksum_method_style_set_grid_template_columns();
            if (checksum != 31881)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_grid_template_columns` checksum `31881`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_grid_template_rows();
            if (checksum != 59381)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_grid_template_rows` checksum `59381`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_inset();
            if (checksum != 40148)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_inset` checksum `40148`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_justify_content();
            if (checksum != 39297)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_justify_content` checksum `39297`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_justify_items();
            if (checksum != 37236)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_justify_items` checksum `37236`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_justify_self();
            if (checksum != 25852)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_justify_self` checksum `25852`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_margin();
            if (checksum != 50951)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_margin` checksum `50951`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_max_size();
            if (checksum != 22427)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_max_size` checksum `22427`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_min_size();
            if (checksum != 17474)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_min_size` checksum `17474`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_overflow();
            if (checksum != 56255)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_overflow` checksum `56255`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_padding();
            if (checksum != 63981)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_padding` checksum `63981`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_position();
            if (checksum != 25426)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_position` checksum `25426`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_scrollbar_width();
            if (checksum != 28792)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_scrollbar_width` checksum `28792`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_style_set_size();
            if (checksum != 19996)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_style_set_size` checksum `19996`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_clear();
            if (checksum != 28506)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_clear` checksum `28506`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_compute_layout();
            if (checksum != 30936)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_compute_layout` checksum `30936`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_taffy_checksum_method_taffytree_compute_layout_with_measure();
            if (checksum != 41939)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_compute_layout_with_measure` checksum `41939`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_disable_rounding();
            if (checksum != 27032)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_disable_rounding` checksum `27032`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_enable_rounding();
            if (checksum != 55253)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_enable_rounding` checksum `55253`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_get_child_at_index();
            if (checksum != 45480)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_get_child_at_index` checksum `45480`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_get_children();
            if (checksum != 59905)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_get_children` checksum `59905`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_get_layout();
            if (checksum != 45151)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_get_layout` checksum `45151`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_get_node_context();
            if (checksum != 31577)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_get_node_context` checksum `31577`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_get_parent();
            if (checksum != 12400)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_get_parent` checksum `12400`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_get_style();
            if (checksum != 44069)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_get_style` checksum `44069`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_get_total_node_count();
            if (checksum != 27322)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_get_total_node_count` checksum `27322`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_taffy_checksum_method_taffytree_insert_child_at_index();
            if (checksum != 3673)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_insert_child_at_index` checksum `3673`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_is_dirty();
            if (checksum != 22440)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_is_dirty` checksum `22440`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_mark_dirty();
            if (checksum != 11578)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_mark_dirty` checksum `11578`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_new_leaf();
            if (checksum != 47027)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_new_leaf` checksum `47027`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_taffy_checksum_method_taffytree_new_leaf_with_context();
            if (checksum != 21232)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_new_leaf_with_context` checksum `21232`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_new_with_children();
            if (checksum != 24230)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_new_with_children` checksum `24230`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_print_tree();
            if (checksum != 4832)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_print_tree` checksum `4832`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_remove();
            if (checksum != 55254)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_remove` checksum `55254`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_remove_child();
            if (checksum != 43437)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_remove_child` checksum `43437`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_taffy_checksum_method_taffytree_remove_child_at_index();
            if (checksum != 38700)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_remove_child_at_index` checksum `38700`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_taffy_checksum_method_taffytree_replace_child_at_index();
            if (checksum != 41770)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_replace_child_at_index` checksum `41770`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_set_children();
            if (checksum != 775)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_set_children` checksum `775`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_set_node_context();
            if (checksum != 44120)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_set_node_context` checksum `44120`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_taffytree_set_style();
            if (checksum != 53275)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_taffytree_set_style` checksum `53275`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_constructor_style_new();
            if (checksum != 33842)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_constructor_style_new` checksum `33842`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_constructor_taffytree_new();
            if (checksum != 61818)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_constructor_taffytree_new` checksum `61818`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_constructor_taffytree_with_capacity();
            if (checksum != 54949)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_constructor_taffytree_with_capacity` checksum `54949`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_taffy_checksum_method_measurefunction_measure();
            if (checksum != 27758)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.taffy: uniffi bindings expected function `uniffi_taffy_checksum_method_measurefunction_measure` checksum `27758`, library returned `{checksum}`"
                );
            }
        }
    }
}

// Public interface members begin here.

#pragma warning disable 8625




class FfiConverterUInt16 : FfiConverter<ushort, ushort>
{
    public static FfiConverterUInt16 INSTANCE = new FfiConverterUInt16();

    public override ushort Lift(ushort value)
    {
        return value;
    }

    public override ushort Read(BigEndianStream stream)
    {
        return stream.ReadUShort();
    }

    public override ushort Lower(ushort value)
    {
        return value;
    }

    public override int AllocationSize(ushort value)
    {
        return 2;
    }

    public override void Write(ushort value, BigEndianStream stream)
    {
        stream.WriteUShort(value);
    }
}

class FfiConverterInt16 : FfiConverter<short, short>
{
    public static FfiConverterInt16 INSTANCE = new FfiConverterInt16();

    public override short Lift(short value)
    {
        return value;
    }

    public override short Read(BigEndianStream stream)
    {
        return stream.ReadShort();
    }

    public override short Lower(short value)
    {
        return value;
    }

    public override int AllocationSize(short value)
    {
        return 2;
    }

    public override void Write(short value, BigEndianStream stream)
    {
        stream.WriteShort(value);
    }
}

class FfiConverterUInt32 : FfiConverter<uint, uint>
{
    public static FfiConverterUInt32 INSTANCE = new FfiConverterUInt32();

    public override uint Lift(uint value)
    {
        return value;
    }

    public override uint Read(BigEndianStream stream)
    {
        return stream.ReadUInt();
    }

    public override uint Lower(uint value)
    {
        return value;
    }

    public override int AllocationSize(uint value)
    {
        return 4;
    }

    public override void Write(uint value, BigEndianStream stream)
    {
        stream.WriteUInt(value);
    }
}

class FfiConverterUInt64 : FfiConverter<ulong, ulong>
{
    public static FfiConverterUInt64 INSTANCE = new FfiConverterUInt64();

    public override ulong Lift(ulong value)
    {
        return value;
    }

    public override ulong Read(BigEndianStream stream)
    {
        return stream.ReadULong();
    }

    public override ulong Lower(ulong value)
    {
        return value;
    }

    public override int AllocationSize(ulong value)
    {
        return 8;
    }

    public override void Write(ulong value, BigEndianStream stream)
    {
        stream.WriteULong(value);
    }
}

class FfiConverterFloat : FfiConverter<float, float>
{
    public static FfiConverterFloat INSTANCE = new FfiConverterFloat();

    public override float Lift(float value)
    {
        return value;
    }

    public override float Read(BigEndianStream stream)
    {
        return stream.ReadFloat();
    }

    public override float Lower(float value)
    {
        return value;
    }

    public override int AllocationSize(float value)
    {
        return 4;
    }

    public override void Write(float value, BigEndianStream stream)
    {
        stream.WriteFloat(value);
    }
}

class FfiConverterBoolean : FfiConverter<bool, sbyte>
{
    public static FfiConverterBoolean INSTANCE = new FfiConverterBoolean();

    public override bool Lift(sbyte value)
    {
        return value != 0;
    }

    public override bool Read(BigEndianStream stream)
    {
        return Lift(stream.ReadSByte());
    }

    public override sbyte Lower(bool value)
    {
        return value ? (sbyte)1 : (sbyte)0;
    }

    public override int AllocationSize(bool value)
    {
        return (sbyte)1;
    }

    public override void Write(bool value, BigEndianStream stream)
    {
        stream.WriteSByte(Lower(value));
    }
}

class FfiConverterString : FfiConverter<string, RustBuffer>
{
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value)
    {
        try
        {
            var bytes = value.AsStream().ReadBytes(value.len);
            return System.Text.Encoding.UTF8.GetString(bytes);
        }
        finally
        {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value)
    {
        const int sizeForLength = 4;
        var sizeForString = value.Length * 3;
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}

// `SafeHandle` implements the semantics outlined below, i.e. its thread safe, and the dispose
// method will only be called once, once all outstanding native calls have completed.
// https://github.com/mozilla/uniffi-rs/blob/0dc031132d9493ca812c3af6e7dd60ad2ea95bf0/uniffi_bindgen/src/bindings/kotlin/templates/ObjectRuntime.kt#L31
// https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.criticalhandle

internal abstract class FFIObject<THandle> : IDisposable
    where THandle : FFISafeHandle
{
    private THandle handle;

    public FFIObject(THandle handle)
    {
        this.handle = handle;
    }

    public THandle GetHandle()
    {
        return handle;
    }

    public void Dispose()
    {
        handle.Dispose();
    }
}

internal abstract class FFISafeHandle : SafeHandle
{
    public FFISafeHandle()
        : base(new IntPtr(0), true) { }

    public FFISafeHandle(IntPtr pointer)
        : this()
    {
        this.SetHandle(pointer);
    }

    public override bool IsInvalid
    {
        get { return handle.ToInt64() == 0; }
    }

    // TODO(CS) this completely breaks any guarantees offered by SafeHandle.. Extracting
    // raw value from SafeHandle puts responsiblity on the consumer of this function to
    // ensure that SafeHandle outlives the stream, and anyone who might have read the raw
    // value from the stream and are holding onto it. Otherwise, the result might be a use
    // after free, or free while method calls are still in flight.
    //
    // This is also relevant for Kotlin.
    //
    public IntPtr DangerousGetRawFfiValue()
    {
        return handle;
    }
}

static class FFIObjectUtil
{
    public static void DisposeAll(params Object?[] list)
    {
        foreach (var obj in list)
        {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj)
    {
        if (obj == null)
        {
            return;
        }

        if (obj is IDisposable disposable)
        {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null)
        {
            if (type.IsGenericType)
            {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))
                {
                    foreach (var value in obj)
                    {
                        Dispose(value);
                    }
                }
                else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>)))
                {
                    foreach (var value in obj.Values)
                    {
                        Dispose(value);
                    }
                }
            }
        }
    }
}

internal interface IStyle
{
    /// <exception cref="TaffyException"></exception>
    AlignContent? GetAlignContent();

    /// <exception cref="TaffyException"></exception>
    AlignItems? GetAlignItems();

    /// <exception cref="TaffyException"></exception>
    AlignItems? GetAlignSelf();

    /// <exception cref="TaffyException"></exception>
    float? GetAspectRatio();

    /// <exception cref="TaffyException"></exception>
    RectLengthPercentage GetBorder();

    /// <exception cref="TaffyException"></exception>
    Display GetDisplay();

    /// <exception cref="TaffyException"></exception>
    Dimension GetFlexBasis();

    /// <exception cref="TaffyException"></exception>
    FlexDirection GetFlexDirection();

    /// <exception cref="TaffyException"></exception>
    float GetFlexGrow();

    /// <exception cref="TaffyException"></exception>
    float GetFlexShrink();

    /// <exception cref="TaffyException"></exception>
    FlexWrap GetFlexWrap();

    /// <exception cref="TaffyException"></exception>
    SizeLengthPercentage GetGap();

    /// <exception cref="TaffyException"></exception>
    List<NonRepeatedTrackSizingFunction> GetGridAutoColumns();

    /// <exception cref="TaffyException"></exception>
    GridAutoFlow GetGridAutoFlow();

    /// <exception cref="TaffyException"></exception>
    List<NonRepeatedTrackSizingFunction> GetGridAutoRows();

    /// <exception cref="TaffyException"></exception>
    LineGridPlacement GetGridColumn();

    /// <exception cref="TaffyException"></exception>
    LineGridPlacement GetGridRow();

    /// <exception cref="TaffyException"></exception>
    List<TrackSizingFunction> GetGridTemplateColumns();

    /// <exception cref="TaffyException"></exception>
    List<TrackSizingFunction> GetGridTemplateRows();

    /// <exception cref="TaffyException"></exception>
    RectLengthPercentageAuto GetInset();

    /// <exception cref="TaffyException"></exception>
    AlignContent? GetJustifyContent();

    /// <exception cref="TaffyException"></exception>
    AlignItems? GetJustifyItems();

    /// <exception cref="TaffyException"></exception>
    AlignItems? GetJustifySelf();

    /// <exception cref="TaffyException"></exception>
    RectLengthPercentageAuto GetMargin();

    /// <exception cref="TaffyException"></exception>
    SizeDimension GetMaxSize();

    /// <exception cref="TaffyException"></exception>
    SizeDimension GetMinSize();

    /// <exception cref="TaffyException"></exception>
    PointOverflow GetOverflow();

    /// <exception cref="TaffyException"></exception>
    RectLengthPercentage GetPadding();

    /// <exception cref="TaffyException"></exception>
    Position GetPosition();

    /// <exception cref="TaffyException"></exception>
    float GetScrollbarWidth();

    /// <exception cref="TaffyException"></exception>
    SizeDimension GetSize();

    /// <exception cref="TaffyException"></exception>
    void SetAlignContent(AlignContent? @value);

    /// <exception cref="TaffyException"></exception>
    void SetAlignItems(AlignItems? @value);

    /// <exception cref="TaffyException"></exception>
    void SetAlignSelf(AlignItems? @value);

    /// <exception cref="TaffyException"></exception>
    void SetAspectRatio(float? @value);

    /// <exception cref="TaffyException"></exception>
    void SetBorder(RectLengthPercentage @value);

    /// <exception cref="TaffyException"></exception>
    void SetDisplay(Display @value);

    /// <exception cref="TaffyException"></exception>
    void SetFlexBasis(Dimension @value);

    /// <exception cref="TaffyException"></exception>
    void SetFlexDirection(FlexDirection @value);

    /// <exception cref="TaffyException"></exception>
    void SetFlexGrow(float @value);

    /// <exception cref="TaffyException"></exception>
    void SetFlexShrink(float @value);

    /// <exception cref="TaffyException"></exception>
    void SetFlexWrap(FlexWrap @value);

    /// <exception cref="TaffyException"></exception>
    void SetGap(SizeLengthPercentage @value);

    /// <exception cref="TaffyException"></exception>
    void SetGridAutoColumns(List<NonRepeatedTrackSizingFunction> @value);

    /// <exception cref="TaffyException"></exception>
    void SetGridAutoFlow(GridAutoFlow @value);

    /// <exception cref="TaffyException"></exception>
    void SetGridAutoRows(List<NonRepeatedTrackSizingFunction> @value);

    /// <exception cref="TaffyException"></exception>
    void SetGridColumn(LineGridPlacement @value);

    /// <exception cref="TaffyException"></exception>
    void SetGridRow(LineGridPlacement @value);

    /// <exception cref="TaffyException"></exception>
    void SetGridTemplateColumns(List<TrackSizingFunction> @value);

    /// <exception cref="TaffyException"></exception>
    void SetGridTemplateRows(List<TrackSizingFunction> @value);

    /// <exception cref="TaffyException"></exception>
    void SetInset(RectLengthPercentageAuto @value);

    /// <exception cref="TaffyException"></exception>
    void SetJustifyContent(AlignContent? @value);

    /// <exception cref="TaffyException"></exception>
    void SetJustifyItems(AlignItems? @value);

    /// <exception cref="TaffyException"></exception>
    void SetJustifySelf(AlignItems? @value);

    /// <exception cref="TaffyException"></exception>
    void SetMargin(RectLengthPercentageAuto @value);

    /// <exception cref="TaffyException"></exception>
    void SetMaxSize(SizeDimension @value);

    /// <exception cref="TaffyException"></exception>
    void SetMinSize(SizeDimension @value);

    /// <exception cref="TaffyException"></exception>
    void SetOverflow(PointOverflow @value);

    /// <exception cref="TaffyException"></exception>
    void SetPadding(RectLengthPercentage @value);

    /// <exception cref="TaffyException"></exception>
    void SetPosition(Position @value);

    /// <exception cref="TaffyException"></exception>
    void SetScrollbarWidth(float @value);

    /// <exception cref="TaffyException"></exception>
    void SetSize(SizeDimension @value);
}

internal class StyleSafeHandle : FFISafeHandle
{
    public StyleSafeHandle()
        : base() { }

    public StyleSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_taffy_fn_free_style(this.handle, ref status);
            }
        );
        return true;
    }
}

internal class Style : FFIObject<StyleSafeHandle>, IStyle
{
    public Style(StyleSafeHandle pointer)
        : base(pointer) { }

    public Style()
        : this(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_constructor_style_new(ref _status)
            )
        ) { }

    /// <exception cref="TaffyException"></exception>
    public AlignContent? GetAlignContent()
    {
        return FfiConverterOptionalTypeAlignContent.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_align_content(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public AlignItems? GetAlignItems()
    {
        return FfiConverterOptionalTypeAlignItems.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_align_items(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public AlignItems? GetAlignSelf()
    {
        return FfiConverterOptionalTypeAlignItems.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_align_self(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public float? GetAspectRatio()
    {
        return FfiConverterOptionalFloat.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_aspect_ratio(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public RectLengthPercentage GetBorder()
    {
        return FfiConverterTypeRectLengthPercentage.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_border(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public Display GetDisplay()
    {
        return FfiConverterTypeDisplay.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_display(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public Dimension GetFlexBasis()
    {
        return FfiConverterTypeDimension.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_flex_basis(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public FlexDirection GetFlexDirection()
    {
        return FfiConverterTypeFlexDirection.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_flex_direction(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public float GetFlexGrow()
    {
        return FfiConverterFloat.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_flex_grow(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public float GetFlexShrink()
    {
        return FfiConverterFloat.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_flex_shrink(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public FlexWrap GetFlexWrap()
    {
        return FfiConverterTypeFlexWrap.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_flex_wrap(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public SizeLengthPercentage GetGap()
    {
        return FfiConverterTypeSizeLengthPercentage.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_gap(this.GetHandle(), ref _status)
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public List<NonRepeatedTrackSizingFunction> GetGridAutoColumns()
    {
        return FfiConverterSequenceTypeNonRepeatedTrackSizingFunction.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_grid_auto_columns(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public GridAutoFlow GetGridAutoFlow()
    {
        return FfiConverterTypeGridAutoFlow.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_grid_auto_flow(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public List<NonRepeatedTrackSizingFunction> GetGridAutoRows()
    {
        return FfiConverterSequenceTypeNonRepeatedTrackSizingFunction.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_grid_auto_rows(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public LineGridPlacement GetGridColumn()
    {
        return FfiConverterTypeLineGridPlacement.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_grid_column(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public LineGridPlacement GetGridRow()
    {
        return FfiConverterTypeLineGridPlacement.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_grid_row(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public List<TrackSizingFunction> GetGridTemplateColumns()
    {
        return FfiConverterSequenceTypeTrackSizingFunction.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_grid_template_columns(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public List<TrackSizingFunction> GetGridTemplateRows()
    {
        return FfiConverterSequenceTypeTrackSizingFunction.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_grid_template_rows(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public RectLengthPercentageAuto GetInset()
    {
        return FfiConverterTypeRectLengthPercentageAuto.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_inset(this.GetHandle(), ref _status)
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public AlignContent? GetJustifyContent()
    {
        return FfiConverterOptionalTypeAlignContent.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_justify_content(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public AlignItems? GetJustifyItems()
    {
        return FfiConverterOptionalTypeAlignItems.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_justify_items(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public AlignItems? GetJustifySelf()
    {
        return FfiConverterOptionalTypeAlignItems.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_justify_self(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public RectLengthPercentageAuto GetMargin()
    {
        return FfiConverterTypeRectLengthPercentageAuto.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_margin(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public SizeDimension GetMaxSize()
    {
        return FfiConverterTypeSizeDimension.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_max_size(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public SizeDimension GetMinSize()
    {
        return FfiConverterTypeSizeDimension.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_min_size(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public PointOverflow GetOverflow()
    {
        return FfiConverterTypePointOverflow.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_overflow(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public RectLengthPercentage GetPadding()
    {
        return FfiConverterTypeRectLengthPercentage.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_padding(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public Position GetPosition()
    {
        return FfiConverterTypePosition.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_position(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public float GetScrollbarWidth()
    {
        return FfiConverterFloat.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_scrollbar_width(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public SizeDimension GetSize()
    {
        return FfiConverterTypeSizeDimension.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_style_get_size(this.GetHandle(), ref _status)
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetAlignContent(AlignContent? @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_align_content(
                    this.GetHandle(),
                    FfiConverterOptionalTypeAlignContent.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetAlignItems(AlignItems? @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_align_items(
                    this.GetHandle(),
                    FfiConverterOptionalTypeAlignItems.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetAlignSelf(AlignItems? @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_align_self(
                    this.GetHandle(),
                    FfiConverterOptionalTypeAlignItems.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetAspectRatio(float? @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_aspect_ratio(
                    this.GetHandle(),
                    FfiConverterOptionalFloat.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetBorder(RectLengthPercentage @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_border(
                    this.GetHandle(),
                    FfiConverterTypeRectLengthPercentage.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetDisplay(Display @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_display(
                    this.GetHandle(),
                    FfiConverterTypeDisplay.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetFlexBasis(Dimension @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_flex_basis(
                    this.GetHandle(),
                    FfiConverterTypeDimension.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetFlexDirection(FlexDirection @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_flex_direction(
                    this.GetHandle(),
                    FfiConverterTypeFlexDirection.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetFlexGrow(float @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_flex_grow(
                    this.GetHandle(),
                    FfiConverterFloat.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetFlexShrink(float @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_flex_shrink(
                    this.GetHandle(),
                    FfiConverterFloat.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetFlexWrap(FlexWrap @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_flex_wrap(
                    this.GetHandle(),
                    FfiConverterTypeFlexWrap.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetGap(SizeLengthPercentage @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_gap(
                    this.GetHandle(),
                    FfiConverterTypeSizeLengthPercentage.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetGridAutoColumns(List<NonRepeatedTrackSizingFunction> @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_grid_auto_columns(
                    this.GetHandle(),
                    FfiConverterSequenceTypeNonRepeatedTrackSizingFunction.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetGridAutoFlow(GridAutoFlow @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_grid_auto_flow(
                    this.GetHandle(),
                    FfiConverterTypeGridAutoFlow.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetGridAutoRows(List<NonRepeatedTrackSizingFunction> @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_grid_auto_rows(
                    this.GetHandle(),
                    FfiConverterSequenceTypeNonRepeatedTrackSizingFunction.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetGridColumn(LineGridPlacement @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_grid_column(
                    this.GetHandle(),
                    FfiConverterTypeLineGridPlacement.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetGridRow(LineGridPlacement @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_grid_row(
                    this.GetHandle(),
                    FfiConverterTypeLineGridPlacement.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetGridTemplateColumns(List<TrackSizingFunction> @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_grid_template_columns(
                    this.GetHandle(),
                    FfiConverterSequenceTypeTrackSizingFunction.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetGridTemplateRows(List<TrackSizingFunction> @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_grid_template_rows(
                    this.GetHandle(),
                    FfiConverterSequenceTypeTrackSizingFunction.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetInset(RectLengthPercentageAuto @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_inset(
                    this.GetHandle(),
                    FfiConverterTypeRectLengthPercentageAuto.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetJustifyContent(AlignContent? @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_justify_content(
                    this.GetHandle(),
                    FfiConverterOptionalTypeAlignContent.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetJustifyItems(AlignItems? @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_justify_items(
                    this.GetHandle(),
                    FfiConverterOptionalTypeAlignItems.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetJustifySelf(AlignItems? @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_justify_self(
                    this.GetHandle(),
                    FfiConverterOptionalTypeAlignItems.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetMargin(RectLengthPercentageAuto @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_margin(
                    this.GetHandle(),
                    FfiConverterTypeRectLengthPercentageAuto.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetMaxSize(SizeDimension @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_max_size(
                    this.GetHandle(),
                    FfiConverterTypeSizeDimension.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetMinSize(SizeDimension @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_min_size(
                    this.GetHandle(),
                    FfiConverterTypeSizeDimension.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetOverflow(PointOverflow @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_overflow(
                    this.GetHandle(),
                    FfiConverterTypePointOverflow.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetPadding(RectLengthPercentage @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_padding(
                    this.GetHandle(),
                    FfiConverterTypeRectLengthPercentage.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetPosition(Position @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_position(
                    this.GetHandle(),
                    FfiConverterTypePosition.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetScrollbarWidth(float @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_scrollbar_width(
                    this.GetHandle(),
                    FfiConverterFloat.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetSize(SizeDimension @value)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_style_set_size(
                    this.GetHandle(),
                    FfiConverterTypeSizeDimension.INSTANCE.Lower(@value),
                    ref _status
                )
        );
    }
}

class FfiConverterTypeStyle : FfiConverter<Style, StyleSafeHandle>
{
    public static FfiConverterTypeStyle INSTANCE = new FfiConverterTypeStyle();

    public override StyleSafeHandle Lower(Style value)
    {
        return value.GetHandle();
    }

    public override Style Lift(StyleSafeHandle value)
    {
        return new Style(value);
    }

    public override Style Read(BigEndianStream stream)
    {
        return Lift(new StyleSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(Style value)
    {
        return 8;
    }

    public override void Write(Style value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

internal interface ITaffyTree
{
    /// <exception cref="TaffyException"></exception>
    void Clear();

    /// <exception cref="TaffyException"></exception>
    void ComputeLayout(NodeId @node, SizeAvailableSpace @availableSpace);

    /// <exception cref="TaffyException"></exception>
    void ComputeLayoutWithMeasure(
        NodeId @nodeId,
        SizeAvailableSpace @availableSpace,
        MeasureFunction @measureFunction
    );

    /// <exception cref="TaffyException"></exception>
    void DisableRounding();

    /// <exception cref="TaffyException"></exception>
    void EnableRounding();

    /// <exception cref="TaffyException"></exception>
    NodeId GetChildAtIndex(NodeId @parent, ulong @childIndex);

    /// <exception cref="TaffyException"></exception>
    List<NodeId> GetChildren(NodeId @parent);

    /// <exception cref="TaffyException"></exception>
    Layout GetLayout(NodeId @node);

    /// <exception cref="TaffyException"></exception>
    void GetNodeContext(NodeId @node);

    /// <exception cref="TaffyException"></exception>
    NodeId? GetParent(NodeId @childId);

    /// <exception cref="TaffyException"></exception>
    Style GetStyle(NodeId @node);

    /// <exception cref="TaffyException"></exception>
    ulong GetTotalNodeCount();

    /// <exception cref="TaffyException"></exception>
    void InsertChildAtIndex(NodeId @parent, ulong @childIndex, NodeId @child);

    /// <exception cref="TaffyException"></exception>
    bool IsDirty(NodeId @node);

    /// <exception cref="TaffyException"></exception>
    void MarkDirty(NodeId @node);

    /// <exception cref="TaffyException"></exception>
    NodeId NewLeaf(Style @layout);

    /// <exception cref="TaffyException"></exception>
    NodeId NewLeafWithContext(Style @layout);

    /// <exception cref="TaffyException"></exception>
    NodeId NewWithChildren(Style @layout, List<NodeId> @children);

    /// <exception cref="TaffyException"></exception>
    void PrintTree(NodeId @root);

    /// <exception cref="TaffyException"></exception>
    NodeId Remove(NodeId @node);

    /// <exception cref="TaffyException"></exception>
    NodeId RemoveChild(NodeId @parent, NodeId @child);

    /// <exception cref="TaffyException"></exception>
    NodeId RemoveChildAtIndex(NodeId @parent, ulong @childIndex);

    /// <exception cref="TaffyException"></exception>
    NodeId ReplaceChildAtIndex(NodeId @parent, ulong @childIndex, NodeId @newChild);

    /// <exception cref="TaffyException"></exception>
    void SetChildren(NodeId @parent, List<NodeId> @children);

    /// <exception cref="TaffyException"></exception>
    void SetNodeContext(NodeId @node);

    /// <exception cref="TaffyException"></exception>
    void SetStyle(NodeId @node, Style @style);
}

internal class TaffyTreeSafeHandle : FFISafeHandle
{
    public TaffyTreeSafeHandle()
        : base() { }

    public TaffyTreeSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_taffy_fn_free_taffytree(this.handle, ref status);
            }
        );
        return true;
    }
}

internal class TaffyTree : FFIObject<TaffyTreeSafeHandle>, ITaffyTree
{
    public TaffyTree(TaffyTreeSafeHandle pointer)
        : base(pointer) { }

    public TaffyTree()
        : this(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_constructor_taffytree_new(ref _status)
            )
        ) { }

    /// <exception cref="TaffyException"></exception>
    public void Clear()
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_clear(this.GetHandle(), ref _status)
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void ComputeLayout(NodeId @node, SizeAvailableSpace @availableSpace)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_compute_layout(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                    FfiConverterTypeSizeAvailableSpace.INSTANCE.Lower(@availableSpace),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void ComputeLayoutWithMeasure(
        NodeId @nodeId,
        SizeAvailableSpace @availableSpace,
        MeasureFunction @measureFunction
    )
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_compute_layout_with_measure(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@nodeId),
                    FfiConverterTypeSizeAvailableSpace.INSTANCE.Lower(@availableSpace),
                    FfiConverterTypeMeasureFunction.INSTANCE.Lower(@measureFunction),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void DisableRounding()
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_disable_rounding(
                    this.GetHandle(),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void EnableRounding()
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_enable_rounding(
                    this.GetHandle(),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId GetChildAtIndex(NodeId @parent, ulong @childIndex)
    {
        return FfiConverterTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_get_child_at_index(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@parent),
                        FfiConverterUInt64.INSTANCE.Lower(@childIndex),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public List<NodeId> GetChildren(NodeId @parent)
    {
        return FfiConverterSequenceTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_get_children(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@parent),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public Layout GetLayout(NodeId @node)
    {
        return FfiConverterTypeLayout.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_get_layout(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void GetNodeContext(NodeId @node)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_get_node_context(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId? GetParent(NodeId @childId)
    {
        return FfiConverterOptionalTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_get_parent(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@childId),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public Style GetStyle(NodeId @node)
    {
        return FfiConverterTypeStyle.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_get_style(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public ulong GetTotalNodeCount()
    {
        return FfiConverterUInt64.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_get_total_node_count(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void InsertChildAtIndex(NodeId @parent, ulong @childIndex, NodeId @child)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_insert_child_at_index(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@parent),
                    FfiConverterUInt64.INSTANCE.Lower(@childIndex),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@child),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public bool IsDirty(NodeId @node)
    {
        return FfiConverterBoolean.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_is_dirty(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void MarkDirty(NodeId @node)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_mark_dirty(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId NewLeaf(Style @layout)
    {
        return FfiConverterTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_new_leaf(
                        this.GetHandle(),
                        FfiConverterTypeStyle.INSTANCE.Lower(@layout),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId NewLeafWithContext(Style @layout)
    {
        return FfiConverterTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_new_leaf_with_context(
                        this.GetHandle(),
                        FfiConverterTypeStyle.INSTANCE.Lower(@layout),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId NewWithChildren(Style @layout, List<NodeId> @children)
    {
        return FfiConverterTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_new_with_children(
                        this.GetHandle(),
                        FfiConverterTypeStyle.INSTANCE.Lower(@layout),
                        FfiConverterSequenceTypeNodeId.INSTANCE.Lower(@children),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void PrintTree(NodeId @root)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_print_tree(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@root),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId Remove(NodeId @node)
    {
        return FfiConverterTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_remove(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId RemoveChild(NodeId @parent, NodeId @child)
    {
        return FfiConverterTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_remove_child(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@parent),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@child),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId RemoveChildAtIndex(NodeId @parent, ulong @childIndex)
    {
        return FfiConverterTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_remove_child_at_index(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@parent),
                        FfiConverterUInt64.INSTANCE.Lower(@childIndex),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public NodeId ReplaceChildAtIndex(NodeId @parent, ulong @childIndex, NodeId @newChild)
    {
        return FfiConverterTypeNodeId.INSTANCE.Lift(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeTaffyException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_method_taffytree_replace_child_at_index(
                        this.GetHandle(),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@parent),
                        FfiConverterUInt64.INSTANCE.Lower(@childIndex),
                        FfiConverterTypeNodeId.INSTANCE.Lower(@newChild),
                        ref _status
                    )
            )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetChildren(NodeId @parent, List<NodeId> @children)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_set_children(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@parent),
                    FfiConverterSequenceTypeNodeId.INSTANCE.Lower(@children),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetNodeContext(NodeId @node)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_set_node_context(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                    ref _status
                )
        );
    }

    /// <exception cref="TaffyException"></exception>
    public void SetStyle(NodeId @node, Style @style)
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeTaffyException.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_taffy_fn_method_taffytree_set_style(
                    this.GetHandle(),
                    FfiConverterTypeNodeId.INSTANCE.Lower(@node),
                    FfiConverterTypeStyle.INSTANCE.Lower(@style),
                    ref _status
                )
        );
    }

    public static TaffyTree WithCapacity(ulong @capacity)
    {
        return new TaffyTree(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_taffy_fn_constructor_taffytree_with_capacity(
                        FfiConverterUInt64.INSTANCE.Lower(@capacity),
                        ref _status
                    )
            )
        );
    }
}

class FfiConverterTypeTaffyTree : FfiConverter<TaffyTree, TaffyTreeSafeHandle>
{
    public static FfiConverterTypeTaffyTree INSTANCE = new FfiConverterTypeTaffyTree();

    public override TaffyTreeSafeHandle Lower(TaffyTree value)
    {
        return value.GetHandle();
    }

    public override TaffyTree Lift(TaffyTreeSafeHandle value)
    {
        return new TaffyTree(value);
    }

    public override TaffyTree Read(BigEndianStream stream)
    {
        return Lift(new TaffyTreeSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(TaffyTree value)
    {
        return 8;
    }

    public override void Write(TaffyTree value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

internal record Layout(
    uint @order,
    PointFloat @location,
    SizeFloat @size,
    SizeFloat @contentSize,
    SizeFloat @scrollbarSize,
    RectFloat @border,
    RectFloat @padding
) { }

class FfiConverterTypeLayout : FfiConverterRustBuffer<Layout>
{
    public static FfiConverterTypeLayout INSTANCE = new FfiConverterTypeLayout();

    public override Layout Read(BigEndianStream stream)
    {
        return new Layout(
            @order: FfiConverterUInt32.INSTANCE.Read(stream),
            @location: FfiConverterTypePointFloat.INSTANCE.Read(stream),
            @size: FfiConverterTypeSizeFloat.INSTANCE.Read(stream),
            @contentSize: FfiConverterTypeSizeFloat.INSTANCE.Read(stream),
            @scrollbarSize: FfiConverterTypeSizeFloat.INSTANCE.Read(stream),
            @border: FfiConverterTypeRectFloat.INSTANCE.Read(stream),
            @padding: FfiConverterTypeRectFloat.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(Layout value)
    {
        return FfiConverterUInt32.INSTANCE.AllocationSize(value.@order)
            + FfiConverterTypePointFloat.INSTANCE.AllocationSize(value.@location)
            + FfiConverterTypeSizeFloat.INSTANCE.AllocationSize(value.@size)
            + FfiConverterTypeSizeFloat.INSTANCE.AllocationSize(value.@contentSize)
            + FfiConverterTypeSizeFloat.INSTANCE.AllocationSize(value.@scrollbarSize)
            + FfiConverterTypeRectFloat.INSTANCE.AllocationSize(value.@border)
            + FfiConverterTypeRectFloat.INSTANCE.AllocationSize(value.@padding);
    }

    public override void Write(Layout value, BigEndianStream stream)
    {
        FfiConverterUInt32.INSTANCE.Write(value.@order, stream);
        FfiConverterTypePointFloat.INSTANCE.Write(value.@location, stream);
        FfiConverterTypeSizeFloat.INSTANCE.Write(value.@size, stream);
        FfiConverterTypeSizeFloat.INSTANCE.Write(value.@contentSize, stream);
        FfiConverterTypeSizeFloat.INSTANCE.Write(value.@scrollbarSize, stream);
        FfiConverterTypeRectFloat.INSTANCE.Write(value.@border, stream);
        FfiConverterTypeRectFloat.INSTANCE.Write(value.@padding, stream);
    }
}

internal record LineGridPlacement(GridPlacement @start, GridPlacement @end) { }

class FfiConverterTypeLineGridPlacement : FfiConverterRustBuffer<LineGridPlacement>
{
    public static FfiConverterTypeLineGridPlacement INSTANCE =
        new FfiConverterTypeLineGridPlacement();

    public override LineGridPlacement Read(BigEndianStream stream)
    {
        return new LineGridPlacement(
            @start: FfiConverterTypeGridPlacement.INSTANCE.Read(stream),
            @end: FfiConverterTypeGridPlacement.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(LineGridPlacement value)
    {
        return FfiConverterTypeGridPlacement.INSTANCE.AllocationSize(value.@start)
            + FfiConverterTypeGridPlacement.INSTANCE.AllocationSize(value.@end);
    }

    public override void Write(LineGridPlacement value, BigEndianStream stream)
    {
        FfiConverterTypeGridPlacement.INSTANCE.Write(value.@start, stream);
        FfiConverterTypeGridPlacement.INSTANCE.Write(value.@end, stream);
    }
}

internal record NonRepeatedTrackSizingFunction(
    MinTrackSizingFunction @min,
    MaxTrackSizingFunction @max
) { }

class FfiConverterTypeNonRepeatedTrackSizingFunction
    : FfiConverterRustBuffer<NonRepeatedTrackSizingFunction>
{
    public static FfiConverterTypeNonRepeatedTrackSizingFunction INSTANCE =
        new FfiConverterTypeNonRepeatedTrackSizingFunction();

    public override NonRepeatedTrackSizingFunction Read(BigEndianStream stream)
    {
        return new NonRepeatedTrackSizingFunction(
            @min: FfiConverterTypeMinTrackSizingFunction.INSTANCE.Read(stream),
            @max: FfiConverterTypeMaxTrackSizingFunction.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(NonRepeatedTrackSizingFunction value)
    {
        return FfiConverterTypeMinTrackSizingFunction.INSTANCE.AllocationSize(value.@min)
            + FfiConverterTypeMaxTrackSizingFunction.INSTANCE.AllocationSize(value.@max);
    }

    public override void Write(NonRepeatedTrackSizingFunction value, BigEndianStream stream)
    {
        FfiConverterTypeMinTrackSizingFunction.INSTANCE.Write(value.@min, stream);
        FfiConverterTypeMaxTrackSizingFunction.INSTANCE.Write(value.@max, stream);
    }
}

internal record PointFloat(float @x, float @y) { }

class FfiConverterTypePointFloat : FfiConverterRustBuffer<PointFloat>
{
    public static FfiConverterTypePointFloat INSTANCE = new FfiConverterTypePointFloat();

    public override PointFloat Read(BigEndianStream stream)
    {
        return new PointFloat(
            @x: FfiConverterFloat.INSTANCE.Read(stream),
            @y: FfiConverterFloat.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(PointFloat value)
    {
        return FfiConverterFloat.INSTANCE.AllocationSize(value.@x)
            + FfiConverterFloat.INSTANCE.AllocationSize(value.@y);
    }

    public override void Write(PointFloat value, BigEndianStream stream)
    {
        FfiConverterFloat.INSTANCE.Write(value.@x, stream);
        FfiConverterFloat.INSTANCE.Write(value.@y, stream);
    }
}

internal record PointOverflow(Overflow @x, Overflow @y) { }

class FfiConverterTypePointOverflow : FfiConverterRustBuffer<PointOverflow>
{
    public static FfiConverterTypePointOverflow INSTANCE = new FfiConverterTypePointOverflow();

    public override PointOverflow Read(BigEndianStream stream)
    {
        return new PointOverflow(
            @x: FfiConverterTypeOverflow.INSTANCE.Read(stream),
            @y: FfiConverterTypeOverflow.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(PointOverflow value)
    {
        return FfiConverterTypeOverflow.INSTANCE.AllocationSize(value.@x)
            + FfiConverterTypeOverflow.INSTANCE.AllocationSize(value.@y);
    }

    public override void Write(PointOverflow value, BigEndianStream stream)
    {
        FfiConverterTypeOverflow.INSTANCE.Write(value.@x, stream);
        FfiConverterTypeOverflow.INSTANCE.Write(value.@y, stream);
    }
}

internal record RectFloat(float @left, float @right, float @top, float @bottom) { }

class FfiConverterTypeRectFloat : FfiConverterRustBuffer<RectFloat>
{
    public static FfiConverterTypeRectFloat INSTANCE = new FfiConverterTypeRectFloat();

    public override RectFloat Read(BigEndianStream stream)
    {
        return new RectFloat(
            @left: FfiConverterFloat.INSTANCE.Read(stream),
            @right: FfiConverterFloat.INSTANCE.Read(stream),
            @top: FfiConverterFloat.INSTANCE.Read(stream),
            @bottom: FfiConverterFloat.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(RectFloat value)
    {
        return FfiConverterFloat.INSTANCE.AllocationSize(value.@left)
            + FfiConverterFloat.INSTANCE.AllocationSize(value.@right)
            + FfiConverterFloat.INSTANCE.AllocationSize(value.@top)
            + FfiConverterFloat.INSTANCE.AllocationSize(value.@bottom);
    }

    public override void Write(RectFloat value, BigEndianStream stream)
    {
        FfiConverterFloat.INSTANCE.Write(value.@left, stream);
        FfiConverterFloat.INSTANCE.Write(value.@right, stream);
        FfiConverterFloat.INSTANCE.Write(value.@top, stream);
        FfiConverterFloat.INSTANCE.Write(value.@bottom, stream);
    }
}

internal record RectLengthPercentage(
    LengthPercentage @top,
    LengthPercentage @bottom,
    LengthPercentage @left,
    LengthPercentage @right
) { }

class FfiConverterTypeRectLengthPercentage : FfiConverterRustBuffer<RectLengthPercentage>
{
    public static FfiConverterTypeRectLengthPercentage INSTANCE =
        new FfiConverterTypeRectLengthPercentage();

    public override RectLengthPercentage Read(BigEndianStream stream)
    {
        return new RectLengthPercentage(
            @top: FfiConverterTypeLengthPercentage.INSTANCE.Read(stream),
            @bottom: FfiConverterTypeLengthPercentage.INSTANCE.Read(stream),
            @left: FfiConverterTypeLengthPercentage.INSTANCE.Read(stream),
            @right: FfiConverterTypeLengthPercentage.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(RectLengthPercentage value)
    {
        return FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(value.@top)
            + FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(value.@bottom)
            + FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(value.@left)
            + FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(value.@right);
    }

    public override void Write(RectLengthPercentage value, BigEndianStream stream)
    {
        FfiConverterTypeLengthPercentage.INSTANCE.Write(value.@top, stream);
        FfiConverterTypeLengthPercentage.INSTANCE.Write(value.@bottom, stream);
        FfiConverterTypeLengthPercentage.INSTANCE.Write(value.@left, stream);
        FfiConverterTypeLengthPercentage.INSTANCE.Write(value.@right, stream);
    }
}

internal record RectLengthPercentageAuto(
    LengthPercentageAuto @top,
    LengthPercentageAuto @bottom,
    LengthPercentageAuto @left,
    LengthPercentageAuto @right
) { }

class FfiConverterTypeRectLengthPercentageAuto : FfiConverterRustBuffer<RectLengthPercentageAuto>
{
    public static FfiConverterTypeRectLengthPercentageAuto INSTANCE =
        new FfiConverterTypeRectLengthPercentageAuto();

    public override RectLengthPercentageAuto Read(BigEndianStream stream)
    {
        return new RectLengthPercentageAuto(
            @top: FfiConverterTypeLengthPercentageAuto.INSTANCE.Read(stream),
            @bottom: FfiConverterTypeLengthPercentageAuto.INSTANCE.Read(stream),
            @left: FfiConverterTypeLengthPercentageAuto.INSTANCE.Read(stream),
            @right: FfiConverterTypeLengthPercentageAuto.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(RectLengthPercentageAuto value)
    {
        return FfiConverterTypeLengthPercentageAuto.INSTANCE.AllocationSize(value.@top)
            + FfiConverterTypeLengthPercentageAuto.INSTANCE.AllocationSize(value.@bottom)
            + FfiConverterTypeLengthPercentageAuto.INSTANCE.AllocationSize(value.@left)
            + FfiConverterTypeLengthPercentageAuto.INSTANCE.AllocationSize(value.@right);
    }

    public override void Write(RectLengthPercentageAuto value, BigEndianStream stream)
    {
        FfiConverterTypeLengthPercentageAuto.INSTANCE.Write(value.@top, stream);
        FfiConverterTypeLengthPercentageAuto.INSTANCE.Write(value.@bottom, stream);
        FfiConverterTypeLengthPercentageAuto.INSTANCE.Write(value.@left, stream);
        FfiConverterTypeLengthPercentageAuto.INSTANCE.Write(value.@right, stream);
    }
}

internal record SizeAvailableSpace(AvailableSpace @width, AvailableSpace @height) { }

class FfiConverterTypeSizeAvailableSpace : FfiConverterRustBuffer<SizeAvailableSpace>
{
    public static FfiConverterTypeSizeAvailableSpace INSTANCE =
        new FfiConverterTypeSizeAvailableSpace();

    public override SizeAvailableSpace Read(BigEndianStream stream)
    {
        return new SizeAvailableSpace(
            @width: FfiConverterTypeAvailableSpace.INSTANCE.Read(stream),
            @height: FfiConverterTypeAvailableSpace.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(SizeAvailableSpace value)
    {
        return FfiConverterTypeAvailableSpace.INSTANCE.AllocationSize(value.@width)
            + FfiConverterTypeAvailableSpace.INSTANCE.AllocationSize(value.@height);
    }

    public override void Write(SizeAvailableSpace value, BigEndianStream stream)
    {
        FfiConverterTypeAvailableSpace.INSTANCE.Write(value.@width, stream);
        FfiConverterTypeAvailableSpace.INSTANCE.Write(value.@height, stream);
    }
}

internal record SizeDimension(Dimension @width, Dimension @height) { }

class FfiConverterTypeSizeDimension : FfiConverterRustBuffer<SizeDimension>
{
    public static FfiConverterTypeSizeDimension INSTANCE = new FfiConverterTypeSizeDimension();

    public override SizeDimension Read(BigEndianStream stream)
    {
        return new SizeDimension(
            @width: FfiConverterTypeDimension.INSTANCE.Read(stream),
            @height: FfiConverterTypeDimension.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(SizeDimension value)
    {
        return FfiConverterTypeDimension.INSTANCE.AllocationSize(value.@width)
            + FfiConverterTypeDimension.INSTANCE.AllocationSize(value.@height);
    }

    public override void Write(SizeDimension value, BigEndianStream stream)
    {
        FfiConverterTypeDimension.INSTANCE.Write(value.@width, stream);
        FfiConverterTypeDimension.INSTANCE.Write(value.@height, stream);
    }
}

internal record SizeFloat(float @width, float @height) { }

class FfiConverterTypeSizeFloat : FfiConverterRustBuffer<SizeFloat>
{
    public static FfiConverterTypeSizeFloat INSTANCE = new FfiConverterTypeSizeFloat();

    public override SizeFloat Read(BigEndianStream stream)
    {
        return new SizeFloat(
            @width: FfiConverterFloat.INSTANCE.Read(stream),
            @height: FfiConverterFloat.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(SizeFloat value)
    {
        return FfiConverterFloat.INSTANCE.AllocationSize(value.@width)
            + FfiConverterFloat.INSTANCE.AllocationSize(value.@height);
    }

    public override void Write(SizeFloat value, BigEndianStream stream)
    {
        FfiConverterFloat.INSTANCE.Write(value.@width, stream);
        FfiConverterFloat.INSTANCE.Write(value.@height, stream);
    }
}

internal record SizeLengthPercentage(LengthPercentage @width, LengthPercentage @height) { }

class FfiConverterTypeSizeLengthPercentage : FfiConverterRustBuffer<SizeLengthPercentage>
{
    public static FfiConverterTypeSizeLengthPercentage INSTANCE =
        new FfiConverterTypeSizeLengthPercentage();

    public override SizeLengthPercentage Read(BigEndianStream stream)
    {
        return new SizeLengthPercentage(
            @width: FfiConverterTypeLengthPercentage.INSTANCE.Read(stream),
            @height: FfiConverterTypeLengthPercentage.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(SizeLengthPercentage value)
    {
        return FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(value.@width)
            + FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(value.@height);
    }

    public override void Write(SizeLengthPercentage value, BigEndianStream stream)
    {
        FfiConverterTypeLengthPercentage.INSTANCE.Write(value.@width, stream);
        FfiConverterTypeLengthPercentage.INSTANCE.Write(value.@height, stream);
    }
}

internal record SizeOptionFloat(float? @width, float? @height) { }

class FfiConverterTypeSizeOptionFloat : FfiConverterRustBuffer<SizeOptionFloat>
{
    public static FfiConverterTypeSizeOptionFloat INSTANCE = new FfiConverterTypeSizeOptionFloat();

    public override SizeOptionFloat Read(BigEndianStream stream)
    {
        return new SizeOptionFloat(
            @width: FfiConverterOptionalFloat.INSTANCE.Read(stream),
            @height: FfiConverterOptionalFloat.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(SizeOptionFloat value)
    {
        return FfiConverterOptionalFloat.INSTANCE.AllocationSize(value.@width)
            + FfiConverterOptionalFloat.INSTANCE.AllocationSize(value.@height);
    }

    public override void Write(SizeOptionFloat value, BigEndianStream stream)
    {
        FfiConverterOptionalFloat.INSTANCE.Write(value.@width, stream);
        FfiConverterOptionalFloat.INSTANCE.Write(value.@height, stream);
    }
}

internal enum AlignContent : int
{
    Start,
    End,
    FlexStart,
    FlexEnd,
    Center,
    Stretch,
    SpaceBetween,
    SpaceEvenly,
    SpaceAround
}

class FfiConverterTypeAlignContent : FfiConverterRustBuffer<AlignContent>
{
    public static FfiConverterTypeAlignContent INSTANCE = new FfiConverterTypeAlignContent();

    public override AlignContent Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(AlignContent), value))
        {
            return (AlignContent)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeAlignContent.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(AlignContent value)
    {
        return 4;
    }

    public override void Write(AlignContent value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

internal enum AlignItems : int
{
    Start,
    End,
    FlexStart,
    FlexEnd,
    Center,
    Baseline,
    Stretch
}

class FfiConverterTypeAlignItems : FfiConverterRustBuffer<AlignItems>
{
    public static FfiConverterTypeAlignItems INSTANCE = new FfiConverterTypeAlignItems();

    public override AlignItems Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(AlignItems), value))
        {
            return (AlignItems)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeAlignItems.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(AlignItems value)
    {
        return 4;
    }

    public override void Write(AlignItems value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

internal record AvailableSpace
{
    public record Definite(float @value) : AvailableSpace { }

    public record MinContent : AvailableSpace { }

    public record MaxContent : AvailableSpace { }
}

class FfiConverterTypeAvailableSpace : FfiConverterRustBuffer<AvailableSpace>
{
    public static FfiConverterRustBuffer<AvailableSpace> INSTANCE =
        new FfiConverterTypeAvailableSpace();

    public override AvailableSpace Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new AvailableSpace.Definite(FfiConverterFloat.INSTANCE.Read(stream));
            case 2:
                return new AvailableSpace.MinContent();
            case 3:
                return new AvailableSpace.MaxContent();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeAvailableSpace.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(AvailableSpace value)
    {
        switch (value)
        {
            case AvailableSpace.Definite variant_value:
                return 4 + FfiConverterFloat.INSTANCE.AllocationSize(variant_value.@value);
            case AvailableSpace.MinContent variant_value:
                return 4;
            case AvailableSpace.MaxContent variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeAvailableSpace.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(AvailableSpace value, BigEndianStream stream)
    {
        switch (value)
        {
            case AvailableSpace.Definite variant_value:
                stream.WriteInt(1);
                FfiConverterFloat.INSTANCE.Write(variant_value.@value, stream);
                break;
            case AvailableSpace.MinContent variant_value:
                stream.WriteInt(2);
                break;
            case AvailableSpace.MaxContent variant_value:
                stream.WriteInt(3);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeAvailableSpace.Write()",
                        value
                    )
                );
        }
    }
}

internal record Dimension
{
    public record Length(float @value) : Dimension { }

    public record Percent(float @value) : Dimension { }

    public record Auto : Dimension { }
}

class FfiConverterTypeDimension : FfiConverterRustBuffer<Dimension>
{
    public static FfiConverterRustBuffer<Dimension> INSTANCE = new FfiConverterTypeDimension();

    public override Dimension Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new Dimension.Length(FfiConverterFloat.INSTANCE.Read(stream));
            case 2:
                return new Dimension.Percent(FfiConverterFloat.INSTANCE.Read(stream));
            case 3:
                return new Dimension.Auto();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeDimension.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(Dimension value)
    {
        switch (value)
        {
            case Dimension.Length variant_value:
                return 4 + FfiConverterFloat.INSTANCE.AllocationSize(variant_value.@value);
            case Dimension.Percent variant_value:
                return 4 + FfiConverterFloat.INSTANCE.AllocationSize(variant_value.@value);
            case Dimension.Auto variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeDimension.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(Dimension value, BigEndianStream stream)
    {
        switch (value)
        {
            case Dimension.Length variant_value:
                stream.WriteInt(1);
                FfiConverterFloat.INSTANCE.Write(variant_value.@value, stream);
                break;
            case Dimension.Percent variant_value:
                stream.WriteInt(2);
                FfiConverterFloat.INSTANCE.Write(variant_value.@value, stream);
                break;
            case Dimension.Auto variant_value:
                stream.WriteInt(3);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeDimension.Write()",
                        value
                    )
                );
        }
    }
}

internal enum Display : int
{
    Block,
    Flex,
    Grid,
    None
}

class FfiConverterTypeDisplay : FfiConverterRustBuffer<Display>
{
    public static FfiConverterTypeDisplay INSTANCE = new FfiConverterTypeDisplay();

    public override Display Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(Display), value))
        {
            return (Display)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypeDisplay.Read()", value)
            );
        }
    }

    public override int AllocationSize(Display value)
    {
        return 4;
    }

    public override void Write(Display value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

internal enum FlexDirection : int
{
    Row,
    Column,
    RowReverse,
    ColumnReverse
}

class FfiConverterTypeFlexDirection : FfiConverterRustBuffer<FlexDirection>
{
    public static FfiConverterTypeFlexDirection INSTANCE = new FfiConverterTypeFlexDirection();

    public override FlexDirection Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(FlexDirection), value))
        {
            return (FlexDirection)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeFlexDirection.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(FlexDirection value)
    {
        return 4;
    }

    public override void Write(FlexDirection value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

internal enum FlexWrap : int
{
    NoWrap,
    Wrap,
    WrapReverse
}

class FfiConverterTypeFlexWrap : FfiConverterRustBuffer<FlexWrap>
{
    public static FfiConverterTypeFlexWrap INSTANCE = new FfiConverterTypeFlexWrap();

    public override FlexWrap Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(FlexWrap), value))
        {
            return (FlexWrap)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypeFlexWrap.Read()", value)
            );
        }
    }

    public override int AllocationSize(FlexWrap value)
    {
        return 4;
    }

    public override void Write(FlexWrap value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

internal enum GridAutoFlow : int
{
    Row,
    Column,
    RowDense,
    ColumnDense
}

class FfiConverterTypeGridAutoFlow : FfiConverterRustBuffer<GridAutoFlow>
{
    public static FfiConverterTypeGridAutoFlow INSTANCE = new FfiConverterTypeGridAutoFlow();

    public override GridAutoFlow Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(GridAutoFlow), value))
        {
            return (GridAutoFlow)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeGridAutoFlow.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(GridAutoFlow value)
    {
        return 4;
    }

    public override void Write(GridAutoFlow value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

internal record GridPlacement
{
    public record Line(short @index) : GridPlacement { }

    public record Span(ushort @span) : GridPlacement { }

    public record Auto : GridPlacement { }
}

class FfiConverterTypeGridPlacement : FfiConverterRustBuffer<GridPlacement>
{
    public static FfiConverterRustBuffer<GridPlacement> INSTANCE =
        new FfiConverterTypeGridPlacement();

    public override GridPlacement Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new GridPlacement.Line(FfiConverterInt16.INSTANCE.Read(stream));
            case 2:
                return new GridPlacement.Span(FfiConverterUInt16.INSTANCE.Read(stream));
            case 3:
                return new GridPlacement.Auto();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeGridPlacement.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(GridPlacement value)
    {
        switch (value)
        {
            case GridPlacement.Line variant_value:
                return 4 + FfiConverterInt16.INSTANCE.AllocationSize(variant_value.@index);
            case GridPlacement.Span variant_value:
                return 4 + FfiConverterUInt16.INSTANCE.AllocationSize(variant_value.@span);
            case GridPlacement.Auto variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeGridPlacement.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(GridPlacement value, BigEndianStream stream)
    {
        switch (value)
        {
            case GridPlacement.Line variant_value:
                stream.WriteInt(1);
                FfiConverterInt16.INSTANCE.Write(variant_value.@index, stream);
                break;
            case GridPlacement.Span variant_value:
                stream.WriteInt(2);
                FfiConverterUInt16.INSTANCE.Write(variant_value.@span, stream);
                break;
            case GridPlacement.Auto variant_value:
                stream.WriteInt(3);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeGridPlacement.Write()",
                        value
                    )
                );
        }
    }
}

internal record GridTrackRepetition
{
    public record AutoFill : GridTrackRepetition { }

    public record AutoFit : GridTrackRepetition { }

    public record Count(ushort @value) : GridTrackRepetition { }
}

class FfiConverterTypeGridTrackRepetition : FfiConverterRustBuffer<GridTrackRepetition>
{
    public static FfiConverterRustBuffer<GridTrackRepetition> INSTANCE =
        new FfiConverterTypeGridTrackRepetition();

    public override GridTrackRepetition Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new GridTrackRepetition.AutoFill();
            case 2:
                return new GridTrackRepetition.AutoFit();
            case 3:
                return new GridTrackRepetition.Count(FfiConverterUInt16.INSTANCE.Read(stream));
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeGridTrackRepetition.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(GridTrackRepetition value)
    {
        switch (value)
        {
            case GridTrackRepetition.AutoFill variant_value:
                return 4;
            case GridTrackRepetition.AutoFit variant_value:
                return 4;
            case GridTrackRepetition.Count variant_value:
                return 4 + FfiConverterUInt16.INSTANCE.AllocationSize(variant_value.@value);
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeGridTrackRepetition.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(GridTrackRepetition value, BigEndianStream stream)
    {
        switch (value)
        {
            case GridTrackRepetition.AutoFill variant_value:
                stream.WriteInt(1);
                break;
            case GridTrackRepetition.AutoFit variant_value:
                stream.WriteInt(2);
                break;
            case GridTrackRepetition.Count variant_value:
                stream.WriteInt(3);
                FfiConverterUInt16.INSTANCE.Write(variant_value.@value, stream);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeGridTrackRepetition.Write()",
                        value
                    )
                );
        }
    }
}

internal record LengthPercentage
{
    public record Length(float @value) : LengthPercentage { }

    public record Percent(float @value) : LengthPercentage { }
}

class FfiConverterTypeLengthPercentage : FfiConverterRustBuffer<LengthPercentage>
{
    public static FfiConverterRustBuffer<LengthPercentage> INSTANCE =
        new FfiConverterTypeLengthPercentage();

    public override LengthPercentage Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new LengthPercentage.Length(FfiConverterFloat.INSTANCE.Read(stream));
            case 2:
                return new LengthPercentage.Percent(FfiConverterFloat.INSTANCE.Read(stream));
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeLengthPercentage.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(LengthPercentage value)
    {
        switch (value)
        {
            case LengthPercentage.Length variant_value:
                return 4 + FfiConverterFloat.INSTANCE.AllocationSize(variant_value.@value);
            case LengthPercentage.Percent variant_value:
                return 4 + FfiConverterFloat.INSTANCE.AllocationSize(variant_value.@value);
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeLengthPercentage.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(LengthPercentage value, BigEndianStream stream)
    {
        switch (value)
        {
            case LengthPercentage.Length variant_value:
                stream.WriteInt(1);
                FfiConverterFloat.INSTANCE.Write(variant_value.@value, stream);
                break;
            case LengthPercentage.Percent variant_value:
                stream.WriteInt(2);
                FfiConverterFloat.INSTANCE.Write(variant_value.@value, stream);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeLengthPercentage.Write()",
                        value
                    )
                );
        }
    }
}

internal record LengthPercentageAuto
{
    public record Length(float @value) : LengthPercentageAuto { }

    public record Percent(float @value) : LengthPercentageAuto { }

    public record Auto : LengthPercentageAuto { }
}

class FfiConverterTypeLengthPercentageAuto : FfiConverterRustBuffer<LengthPercentageAuto>
{
    public static FfiConverterRustBuffer<LengthPercentageAuto> INSTANCE =
        new FfiConverterTypeLengthPercentageAuto();

    public override LengthPercentageAuto Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new LengthPercentageAuto.Length(FfiConverterFloat.INSTANCE.Read(stream));
            case 2:
                return new LengthPercentageAuto.Percent(FfiConverterFloat.INSTANCE.Read(stream));
            case 3:
                return new LengthPercentageAuto.Auto();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeLengthPercentageAuto.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(LengthPercentageAuto value)
    {
        switch (value)
        {
            case LengthPercentageAuto.Length variant_value:
                return 4 + FfiConverterFloat.INSTANCE.AllocationSize(variant_value.@value);
            case LengthPercentageAuto.Percent variant_value:
                return 4 + FfiConverterFloat.INSTANCE.AllocationSize(variant_value.@value);
            case LengthPercentageAuto.Auto variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeLengthPercentageAuto.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(LengthPercentageAuto value, BigEndianStream stream)
    {
        switch (value)
        {
            case LengthPercentageAuto.Length variant_value:
                stream.WriteInt(1);
                FfiConverterFloat.INSTANCE.Write(variant_value.@value, stream);
                break;
            case LengthPercentageAuto.Percent variant_value:
                stream.WriteInt(2);
                FfiConverterFloat.INSTANCE.Write(variant_value.@value, stream);
                break;
            case LengthPercentageAuto.Auto variant_value:
                stream.WriteInt(3);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeLengthPercentageAuto.Write()",
                        value
                    )
                );
        }
    }
}

internal record MaxTrackSizingFunction
{
    public record Fixed(LengthPercentage @value) : MaxTrackSizingFunction { }

    public record MinContent : MaxTrackSizingFunction { }

    public record MaxContent : MaxTrackSizingFunction { }

    public record FitContent(LengthPercentage @value) : MaxTrackSizingFunction { }

    public record Auto : MaxTrackSizingFunction { }

    public record Fraction(float @value) : MaxTrackSizingFunction { }
}

class FfiConverterTypeMaxTrackSizingFunction : FfiConverterRustBuffer<MaxTrackSizingFunction>
{
    public static FfiConverterRustBuffer<MaxTrackSizingFunction> INSTANCE =
        new FfiConverterTypeMaxTrackSizingFunction();

    public override MaxTrackSizingFunction Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new MaxTrackSizingFunction.Fixed(
                    FfiConverterTypeLengthPercentage.INSTANCE.Read(stream)
                );
            case 2:
                return new MaxTrackSizingFunction.MinContent();
            case 3:
                return new MaxTrackSizingFunction.MaxContent();
            case 4:
                return new MaxTrackSizingFunction.FitContent(
                    FfiConverterTypeLengthPercentage.INSTANCE.Read(stream)
                );
            case 5:
                return new MaxTrackSizingFunction.Auto();
            case 6:
                return new MaxTrackSizingFunction.Fraction(FfiConverterFloat.INSTANCE.Read(stream));
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeMaxTrackSizingFunction.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(MaxTrackSizingFunction value)
    {
        switch (value)
        {
            case MaxTrackSizingFunction.Fixed variant_value:
                return 4
                    + FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(
                        variant_value.@value
                    );
            case MaxTrackSizingFunction.MinContent variant_value:
                return 4;
            case MaxTrackSizingFunction.MaxContent variant_value:
                return 4;
            case MaxTrackSizingFunction.FitContent variant_value:
                return 4
                    + FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(
                        variant_value.@value
                    );
            case MaxTrackSizingFunction.Auto variant_value:
                return 4;
            case MaxTrackSizingFunction.Fraction variant_value:
                return 4 + FfiConverterFloat.INSTANCE.AllocationSize(variant_value.@value);
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeMaxTrackSizingFunction.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(MaxTrackSizingFunction value, BigEndianStream stream)
    {
        switch (value)
        {
            case MaxTrackSizingFunction.Fixed variant_value:
                stream.WriteInt(1);
                FfiConverterTypeLengthPercentage.INSTANCE.Write(variant_value.@value, stream);
                break;
            case MaxTrackSizingFunction.MinContent variant_value:
                stream.WriteInt(2);
                break;
            case MaxTrackSizingFunction.MaxContent variant_value:
                stream.WriteInt(3);
                break;
            case MaxTrackSizingFunction.FitContent variant_value:
                stream.WriteInt(4);
                FfiConverterTypeLengthPercentage.INSTANCE.Write(variant_value.@value, stream);
                break;
            case MaxTrackSizingFunction.Auto variant_value:
                stream.WriteInt(5);
                break;
            case MaxTrackSizingFunction.Fraction variant_value:
                stream.WriteInt(6);
                FfiConverterFloat.INSTANCE.Write(variant_value.@value, stream);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeMaxTrackSizingFunction.Write()",
                        value
                    )
                );
        }
    }
}

internal record MinTrackSizingFunction
{
    public record Fixed(LengthPercentage @value) : MinTrackSizingFunction { }

    public record MinContent : MinTrackSizingFunction { }

    public record MaxContent : MinTrackSizingFunction { }

    public record Auto : MinTrackSizingFunction { }
}

class FfiConverterTypeMinTrackSizingFunction : FfiConverterRustBuffer<MinTrackSizingFunction>
{
    public static FfiConverterRustBuffer<MinTrackSizingFunction> INSTANCE =
        new FfiConverterTypeMinTrackSizingFunction();

    public override MinTrackSizingFunction Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new MinTrackSizingFunction.Fixed(
                    FfiConverterTypeLengthPercentage.INSTANCE.Read(stream)
                );
            case 2:
                return new MinTrackSizingFunction.MinContent();
            case 3:
                return new MinTrackSizingFunction.MaxContent();
            case 4:
                return new MinTrackSizingFunction.Auto();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeMinTrackSizingFunction.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(MinTrackSizingFunction value)
    {
        switch (value)
        {
            case MinTrackSizingFunction.Fixed variant_value:
                return 4
                    + FfiConverterTypeLengthPercentage.INSTANCE.AllocationSize(
                        variant_value.@value
                    );
            case MinTrackSizingFunction.MinContent variant_value:
                return 4;
            case MinTrackSizingFunction.MaxContent variant_value:
                return 4;
            case MinTrackSizingFunction.Auto variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeMinTrackSizingFunction.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(MinTrackSizingFunction value, BigEndianStream stream)
    {
        switch (value)
        {
            case MinTrackSizingFunction.Fixed variant_value:
                stream.WriteInt(1);
                FfiConverterTypeLengthPercentage.INSTANCE.Write(variant_value.@value, stream);
                break;
            case MinTrackSizingFunction.MinContent variant_value:
                stream.WriteInt(2);
                break;
            case MinTrackSizingFunction.MaxContent variant_value:
                stream.WriteInt(3);
                break;
            case MinTrackSizingFunction.Auto variant_value:
                stream.WriteInt(4);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeMinTrackSizingFunction.Write()",
                        value
                    )
                );
        }
    }
}

internal enum Overflow : int
{
    Visible,
    Clip,
    Hidden,
    Scroll
}

class FfiConverterTypeOverflow : FfiConverterRustBuffer<Overflow>
{
    public static FfiConverterTypeOverflow INSTANCE = new FfiConverterTypeOverflow();

    public override Overflow Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(Overflow), value))
        {
            return (Overflow)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypeOverflow.Read()", value)
            );
        }
    }

    public override int AllocationSize(Overflow value)
    {
        return 4;
    }

    public override void Write(Overflow value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

internal enum Position : int
{
    Relative,
    Absolute
}

class FfiConverterTypePosition : FfiConverterRustBuffer<Position>
{
    public static FfiConverterTypePosition INSTANCE = new FfiConverterTypePosition();

    public override Position Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(Position), value))
        {
            return (Position)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypePosition.Read()", value)
            );
        }
    }

    public override int AllocationSize(Position value)
    {
        return 4;
    }

    public override void Write(Position value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

internal class TaffyException : UniffiException
{
    // Each variant is a nested class

    public class Poison : TaffyException { }

    public class ChildIndexOutOfBounds : TaffyException
    {
        // Members
        public NodeId @parent;
        public ulong @childIndex;
        public ulong @childCount;

        // Constructor
        public ChildIndexOutOfBounds(NodeId @parent, ulong @childIndex, ulong @childCount)
        {
            this.@parent = @parent;
            this.@childIndex = @childIndex;
            this.@childCount = @childCount;
        }
    }

    public class InvalidParentNode : TaffyException
    {
        // Members
        public NodeId @nodeId;

        // Constructor
        public InvalidParentNode(NodeId @nodeId)
        {
            this.@nodeId = @nodeId;
        }
    }

    public class InvalidChildNode : TaffyException
    {
        // Members
        public NodeId @nodeId;

        // Constructor
        public InvalidChildNode(NodeId @nodeId)
        {
            this.@nodeId = @nodeId;
        }
    }

    public class InvalidInputNode : TaffyException
    {
        // Members
        public NodeId @nodeId;

        // Constructor
        public InvalidInputNode(NodeId @nodeId)
        {
            this.@nodeId = @nodeId;
        }
    }
}

class FfiConverterTypeTaffyException
    : FfiConverterRustBuffer<TaffyException>,
        CallStatusErrorHandler<TaffyException>
{
    public static FfiConverterTypeTaffyException INSTANCE = new FfiConverterTypeTaffyException();

    public override TaffyException Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new TaffyException.Poison();
            case 2:
                return new TaffyException.ChildIndexOutOfBounds(
                    FfiConverterTypeNodeId.INSTANCE.Read(stream),
                    FfiConverterUInt64.INSTANCE.Read(stream),
                    FfiConverterUInt64.INSTANCE.Read(stream)
                );
            case 3:
                return new TaffyException.InvalidParentNode(
                    FfiConverterTypeNodeId.INSTANCE.Read(stream)
                );
            case 4:
                return new TaffyException.InvalidChildNode(
                    FfiConverterTypeNodeId.INSTANCE.Read(stream)
                );
            case 5:
                return new TaffyException.InvalidInputNode(
                    FfiConverterTypeNodeId.INSTANCE.Read(stream)
                );
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTaffyException.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(TaffyException value)
    {
        switch (value)
        {
            case TaffyException.Poison variant_value:
                return 4;
            case TaffyException.ChildIndexOutOfBounds variant_value:
                return 4
                    + FfiConverterTypeNodeId.INSTANCE.AllocationSize(variant_value.@parent)
                    + FfiConverterUInt64.INSTANCE.AllocationSize(variant_value.@childIndex)
                    + FfiConverterUInt64.INSTANCE.AllocationSize(variant_value.@childCount);
            case TaffyException.InvalidParentNode variant_value:
                return 4 + FfiConverterTypeNodeId.INSTANCE.AllocationSize(variant_value.@nodeId);
            case TaffyException.InvalidChildNode variant_value:
                return 4 + FfiConverterTypeNodeId.INSTANCE.AllocationSize(variant_value.@nodeId);
            case TaffyException.InvalidInputNode variant_value:
                return 4 + FfiConverterTypeNodeId.INSTANCE.AllocationSize(variant_value.@nodeId);
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTaffyException.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(TaffyException value, BigEndianStream stream)
    {
        switch (value)
        {
            case TaffyException.Poison variant_value:
                stream.WriteInt(1);
                break;
            case TaffyException.ChildIndexOutOfBounds variant_value:
                stream.WriteInt(2);
                FfiConverterTypeNodeId.INSTANCE.Write(variant_value.@parent, stream);
                FfiConverterUInt64.INSTANCE.Write(variant_value.@childIndex, stream);
                FfiConverterUInt64.INSTANCE.Write(variant_value.@childCount, stream);
                break;
            case TaffyException.InvalidParentNode variant_value:
                stream.WriteInt(3);
                FfiConverterTypeNodeId.INSTANCE.Write(variant_value.@nodeId, stream);
                break;
            case TaffyException.InvalidChildNode variant_value:
                stream.WriteInt(4);
                FfiConverterTypeNodeId.INSTANCE.Write(variant_value.@nodeId, stream);
                break;
            case TaffyException.InvalidInputNode variant_value:
                stream.WriteInt(5);
                FfiConverterTypeNodeId.INSTANCE.Write(variant_value.@nodeId, stream);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTaffyException.Write()",
                        value
                    )
                );
        }
    }
}

internal record TrackSizingFunction
{
    public record Single(NonRepeatedTrackSizingFunction @func) : TrackSizingFunction { }

    public record Repeat(GridTrackRepetition @rep, List<NonRepeatedTrackSizingFunction> @funcs)
        : TrackSizingFunction { }
}

class FfiConverterTypeTrackSizingFunction : FfiConverterRustBuffer<TrackSizingFunction>
{
    public static FfiConverterRustBuffer<TrackSizingFunction> INSTANCE =
        new FfiConverterTypeTrackSizingFunction();

    public override TrackSizingFunction Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new TrackSizingFunction.Single(
                    FfiConverterTypeNonRepeatedTrackSizingFunction.INSTANCE.Read(stream)
                );
            case 2:
                return new TrackSizingFunction.Repeat(
                    FfiConverterTypeGridTrackRepetition.INSTANCE.Read(stream),
                    FfiConverterSequenceTypeNonRepeatedTrackSizingFunction.INSTANCE.Read(stream)
                );
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeTrackSizingFunction.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(TrackSizingFunction value)
    {
        switch (value)
        {
            case TrackSizingFunction.Single variant_value:
                return 4
                    + FfiConverterTypeNonRepeatedTrackSizingFunction.INSTANCE.AllocationSize(
                        variant_value.@func
                    );
            case TrackSizingFunction.Repeat variant_value:
                return 4
                    + FfiConverterTypeGridTrackRepetition.INSTANCE.AllocationSize(
                        variant_value.@rep
                    )
                    + FfiConverterSequenceTypeNonRepeatedTrackSizingFunction.INSTANCE.AllocationSize(
                        variant_value.@funcs
                    );
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeTrackSizingFunction.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(TrackSizingFunction value, BigEndianStream stream)
    {
        switch (value)
        {
            case TrackSizingFunction.Single variant_value:
                stream.WriteInt(1);
                FfiConverterTypeNonRepeatedTrackSizingFunction.INSTANCE.Write(
                    variant_value.@func,
                    stream
                );
                break;
            case TrackSizingFunction.Repeat variant_value:
                stream.WriteInt(2);
                FfiConverterTypeGridTrackRepetition.INSTANCE.Write(variant_value.@rep, stream);
                FfiConverterSequenceTypeNonRepeatedTrackSizingFunction.INSTANCE.Write(
                    variant_value.@funcs,
                    stream
                );
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeTrackSizingFunction.Write()",
                        value
                    )
                );
        }
    }
}

static class UniffiCallbackResponseCode
{
    public static int SUCCESS = 0;
    public static int ERROR = 1;
    public static int UNEXPECTED_ERROR = 2;
}

class ConcurrentHandleMap<T>
    where T : notnull
{
    Dictionary<ulong, T> leftMap = new Dictionary<ulong, T>();
    Dictionary<T, ulong> rightMap = new Dictionary<T, ulong>();

    Object lock_ = new Object();
    ulong currentHandle = 0;

    public ulong Insert(T obj)
    {
        lock (lock_)
        {
            ulong existingHandle = 0;
            if (rightMap.TryGetValue(obj, out existingHandle))
            {
                return existingHandle;
            }
            currentHandle += 1;
            leftMap[currentHandle] = obj;
            rightMap[obj] = currentHandle;
            return currentHandle;
        }
    }

    public bool TryGet(ulong handle, out T result)
    {
        // Possible null reference assignment
#pragma warning disable 8601
        return leftMap.TryGetValue(handle, out result);
#pragma warning restore 8601
    }

    public bool Remove(ulong handle)
    {
        return Remove(handle, out T result);
    }

    public bool Remove(ulong handle, out T result)
    {
        lock (lock_)
        {
            // Possible null reference assignment
#pragma warning disable 8601
            if (leftMap.TryGetValue(handle, out result))
            {
#pragma warning restore 8601
                leftMap.Remove(handle);
                rightMap.Remove(result);
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate int ForeignCallback(
    ulong handle,
    uint method,
    IntPtr argsData,
    int argsLength,
    ref RustBuffer outBuf
);

internal abstract class FfiConverterCallbackInterface<CallbackInterface>
    : FfiConverter<CallbackInterface, ulong>
    where CallbackInterface : notnull
{
    ConcurrentHandleMap<CallbackInterface> handleMap = new ConcurrentHandleMap<CallbackInterface>();

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    public abstract void Register();

    public RustBuffer Drop(ulong handle)
    {
        handleMap.Remove(handle);
        return new RustBuffer();
    }

    public override CallbackInterface Lift(ulong handle)
    {
        if (!handleMap.TryGet(handle, out CallbackInterface result))
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
        return result;
    }

    public override CallbackInterface Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override ulong Lower(CallbackInterface value)
    {
        return handleMap.Insert(value);
    }

    public override int AllocationSize(CallbackInterface value)
    {
        return 8;
    }

    public override void Write(CallbackInterface value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

internal interface MeasureFunction
{
    SizeFloat Measure(SizeOptionFloat @knownSize, SizeAvailableSpace @avaliableSpace, NodeId @node);
}

// The ForeignCallback that is passed to Rust.
class ForeignCallbackTypeMeasureFunction
{
    // This cannot be a static method. Although C# supports implicitly using a static method as a
    // delegate, the behaviour is incorrect for this use case. Using static method as a delegate
    // argument creates an implicit delegate object, that is later going to be collected by GC. Any
    // attempt to invoke a garbage collected delegate results in an error:
    //   > A callback was made on a garbage collected delegate of type 'ForeignCallback::..'
    public static ForeignCallback INSTANCE = (
        ulong handle,
        uint method,
        IntPtr argsData,
        int argsLength,
        ref RustBuffer outBuf
    ) =>
    {
        var cb = FfiConverterTypeMeasureFunction.INSTANCE.Lift(handle);
        switch (method)
        {
            case 0:
            {
                // 0 means Rust is done with the callback, and the callback
                // can be dropped by the foreign language.
                FfiConverterTypeMeasureFunction.INSTANCE.Drop(handle);
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0;
            }

            case 1:
            {
                try
                {
                    outBuf = InvokeMeasure(cb, RustBuffer.MemoryStream(argsData, argsLength));
                    return UniffiCallbackResponseCode.SUCCESS;
                }
                catch (Exception e)
                {
                    // Unexpected error
                    try
                    {
                        // Try to serialize the error into a string
                        outBuf = FfiConverterString.INSTANCE.Lower(e.Message);
                    }
                    catch
                    {
                        // If that fails, then it's time to give up and just return
                    }
                    return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
                }
            }

            default:
            {
                // This should never happen, because an out of bounds method index won't
                // ever be used. Once we can catch errors, we should return an InternalException.
                // https://github.com/mozilla/uniffi-rs/issues/351
                return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
            }
        }
    };

    static RustBuffer InvokeMeasure(MeasureFunction callback, BigEndianStream stream)
    {
        var result = callback.Measure(
            FfiConverterTypeSizeOptionFloat.INSTANCE.Read(stream),
            FfiConverterTypeSizeAvailableSpace.INSTANCE.Read(stream),
            FfiConverterTypeNodeId.INSTANCE.Read(stream)
        );
        return FfiConverterTypeSizeFloat.INSTANCE.LowerIntoRustBuffer(result);
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeMeasureFunction : FfiConverterCallbackInterface<MeasureFunction>
{
    public static FfiConverterTypeMeasureFunction INSTANCE = new FfiConverterTypeMeasureFunction();

    public override void Register()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_taffy_fn_init_callback_measurefunction(
                    ForeignCallbackTypeMeasureFunction.INSTANCE,
                    ref status
                );
            }
        );
    }
}

class FfiConverterOptionalFloat : FfiConverterRustBuffer<float?>
{
    public static FfiConverterOptionalFloat INSTANCE = new FfiConverterOptionalFloat();

    public override float? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterFloat.INSTANCE.Read(stream);
    }

    public override int AllocationSize(float? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterFloat.INSTANCE.AllocationSize((float)value);
        }
    }

    public override void Write(float? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterFloat.INSTANCE.Write((float)value, stream);
        }
    }
}

class FfiConverterOptionalTypeAlignContent : FfiConverterRustBuffer<AlignContent?>
{
    public static FfiConverterOptionalTypeAlignContent INSTANCE =
        new FfiConverterOptionalTypeAlignContent();

    public override AlignContent? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeAlignContent.INSTANCE.Read(stream);
    }

    public override int AllocationSize(AlignContent? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterTypeAlignContent.INSTANCE.AllocationSize((AlignContent)value);
        }
    }

    public override void Write(AlignContent? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeAlignContent.INSTANCE.Write((AlignContent)value, stream);
        }
    }
}

class FfiConverterOptionalTypeAlignItems : FfiConverterRustBuffer<AlignItems?>
{
    public static FfiConverterOptionalTypeAlignItems INSTANCE =
        new FfiConverterOptionalTypeAlignItems();

    public override AlignItems? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeAlignItems.INSTANCE.Read(stream);
    }

    public override int AllocationSize(AlignItems? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterTypeAlignItems.INSTANCE.AllocationSize((AlignItems)value);
        }
    }

    public override void Write(AlignItems? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeAlignItems.INSTANCE.Write((AlignItems)value, stream);
        }
    }
}

class FfiConverterOptionalTypeNodeId : FfiConverterRustBuffer<NodeId?>
{
    public static FfiConverterOptionalTypeNodeId INSTANCE = new FfiConverterOptionalTypeNodeId();

    public override NodeId? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeNodeId.INSTANCE.Read(stream);
    }

    public override int AllocationSize(NodeId? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterTypeNodeId.INSTANCE.AllocationSize((NodeId)value);
        }
    }

    public override void Write(NodeId? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeNodeId.INSTANCE.Write((NodeId)value, stream);
        }
    }
}

class FfiConverterSequenceTypeNonRepeatedTrackSizingFunction
    : FfiConverterRustBuffer<List<NonRepeatedTrackSizingFunction>>
{
    public static FfiConverterSequenceTypeNonRepeatedTrackSizingFunction INSTANCE =
        new FfiConverterSequenceTypeNonRepeatedTrackSizingFunction();

    public override List<NonRepeatedTrackSizingFunction> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<NonRepeatedTrackSizingFunction>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeNonRepeatedTrackSizingFunction.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<NonRepeatedTrackSizingFunction> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item =>
                FfiConverterTypeNonRepeatedTrackSizingFunction.INSTANCE.AllocationSize(item)
            )
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<NonRepeatedTrackSizingFunction> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item =>
            FfiConverterTypeNonRepeatedTrackSizingFunction.INSTANCE.Write(item, stream)
        );
    }
}

class FfiConverterSequenceTypeTrackSizingFunction
    : FfiConverterRustBuffer<List<TrackSizingFunction>>
{
    public static FfiConverterSequenceTypeTrackSizingFunction INSTANCE =
        new FfiConverterSequenceTypeTrackSizingFunction();

    public override List<TrackSizingFunction> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<TrackSizingFunction>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeTrackSizingFunction.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<TrackSizingFunction> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterTypeTrackSizingFunction.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<TrackSizingFunction> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeTrackSizingFunction.INSTANCE.Write(item, stream));
    }
}

class FfiConverterSequenceTypeNodeId : FfiConverterRustBuffer<List<NodeId>>
{
    public static FfiConverterSequenceTypeNodeId INSTANCE = new FfiConverterSequenceTypeNodeId();

    public override List<NodeId> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<NodeId>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeNodeId.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<NodeId> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterTypeNodeId.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<NodeId> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeNodeId.INSTANCE.Write(item, stream));
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
#pragma warning restore 8625
internal static class TaffyMethods { }
